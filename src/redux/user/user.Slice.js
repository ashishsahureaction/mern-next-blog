import { createSlice } from '@reduxjs/toolkit';

const initialState = { currentUser: null, error: null, loading: false,};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    signInStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    signInSuccess: (state, action) => {
      state.currentUser = action.payload;
      state.loading = false;
      state.error = null;
    },
    signInFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    updateStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    updateSuccess: (state, action) => {
      state.currentUser = action.payload;
      state.loading = false;
      state.error = null;
    },
    updateFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    deleteUserStart: (state) => {
      state.loading = true;
      state.error = null;
    },
    deleteUserSuccess: (state) => {
      state.currentUser = null;
      state.loading = false;
      state.error = null;
    },
    deleteUserFailure: (state, action) => {
      state.loading = false;
      state.error = action.payload;
    },
    signoutSuccess: (state) => {
      state.currentUser = null;
      state.error = null;
      state.loading = false;
    },
  },
});

export const {
  signInStart,
  signInSuccess,
  signInFailure,
  updateStart,
  updateSuccess,
  updateFailure,
  deleteUserStart,
  deleteUserSuccess,
  deleteUserFailure,
  signoutSuccess,
} = userSlice.actions;

export default userSlice.reducer;


//here creating actions like signInStart, signInSuccess, signInFailure, these are Action creators are generated for each case reducer function

// createSlice() method takes 3 arguments: 1-name:, 2-Initial State, 3-reducers
// reducer function takes 2 parameter 1-state and 2-action and return a new state
// const [state,dispatch]=useReducer(reducerFn, initial state )Hook used in functional componnet
// reducer fn is a ture function which only return new state
// in UI an event who dispatch trigger the action 
// action has 2 property type: and paylod:

//export const {signInStart, signInSuccess, signInFailure,} = userSlice.actions;
// userslice.actions: This is an object containing all the action creators generated by the createSlice function. 
// Each key in the object corresponds to a reducer function name.
// { signInStart, signInSuccess, signInFailure, }: This is a destructuring assignment that extracts the login and logout properties from the userSlice.actions object.
//state is the reference to your Redux state, you should access status as initial state
//action has a payload property, and within the payload, there is a userData property. 
//The data contained in action.payload.userData is used to update the userData property in the state.

//signInStart when initiating a sign-in process, signInSuccess when the sign-in is successful, 
//and signInFailure when there's an error during sign-in. The state will be automatically updated based on these actions.

//using useSelector hook to extract the loading and error properties from the Redux state. 

////const { currentUser } = useSelector((state) => state.user);:  useSelector hook to extract the currentUser object from the Redux store. 
//Redux store has a slice named user, and currentUser is a property of that slice.